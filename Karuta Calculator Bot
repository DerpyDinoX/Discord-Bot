from webserver import keep_alive
import os
import asyncio
import discord
from discord.ext import commands

client = commands.Bot(command_prefix="!")

@client.event
async def on_ready():
    print("Bot is ready")

@client.command()
async def hello(ctx):
    await ctx.send("Hi")

@client.command()
async def calc(ctx):
    await ctx.send("Enter Base Value:")

    try:
        message = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
        baseV = int(message.content)
    except asyncio.TimeoutError:
        await ctx.send("You timed out.")
        return
    except:
        await ctx.send("Not an integer!")
        return

    await ctx.send("Enter Effort Value:")

    try:
        messageB = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
        effort = int(messageB.content)
    except asyncio.TimeoutError:
        await ctx.send("You timed out.")
        return
    except:
        await ctx.send("Not an integer!")
        return

    else:
        style = round(baseV*0.2)
        wellness = round(style*0.25)
        total = style+wellness
        ##print(style)
        ##print(wellness)
        ##print(baseV+total)
        
        styleA = round(baseV*0.75)
        wellnessA = round(styleA*0.25)
        totalA = styleA+wellnessA
        
        styleB = round(baseV*1.5)
        wellnessB = round(styleB*0.25)
        totalB = styleB+wellnessB

        embeded = discord.Embed(
            title="Efforts",
            description="**Regular Dye: **" + str(effort+total)+ "\n**Mystic Dye *or* Frame: **" + str(effort+totalA) + "\n**Mystic Dye *and* Frame: **" + str(effort+totalB),
            color=0xEE8700
            )
        await ctx.send(embed=embeded)


@client.command()
async def upgrade(ctx):
    await ctx.send("Enter Effort Value:")

    try:
        message = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
        baseV = int(message.content)
    except asyncio.TimeoutError:
        await ctx.send("You timed out.")
        return
    except:
        await ctx.send("Not an integer!")
        return

    await ctx.send("Enter Condition:\nDamaged => 0\nPoor => 1\nGood => 2\nExcellent => 3")

    try:
        messageB = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
        condition = int(messageB.content)
    except asyncio.TimeoutError:
        await ctx.send("You timed out.")
        return
    except:
        await ctx.send("Not an integer!")
        return
    if condition > 3 or condition < 0:
        await ctx.send("That is an invalid number!")
        return
    else:
        upgrades = int(4-condition)
        while upgrades > 0:
            effort = round(baseV*0.89) + baseV
            baseV = effort
            upgrades -= 1
            if upgrades == 3:
                await ctx.send("Poor: " + str(effort))
            elif upgrades == 2:
                await ctx.send("Good: " + str(effort))
            elif upgrades == 1:
                await ctx.send("Excellent: " + str(effort))
            else:
                await ctx.send("Mint: " + str(effort))

@client.command()
async def injured(ctx):
  await ctx.send("Enter Current Effort:")
  try:
      message = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
      baseV = int(message.content)
  except asyncio.TimeoutError:
      await ctx.send("You timed out.")
      return
  except:
      await ctx.send("Not an integer!")
      return

  await ctx.send("Enter Current Wellness:")
  try:
      messageB = await client.wait_for("message", check=lambda m: m.author == ctx.author and m.channel == ctx.channel, timeout=10.0)
      wellness = abs(int(messageB.content))
  except asyncio.TimeoutError:
      await ctx.send("You timed out.")
      return
  except:
      await ctx.send("Not an integer!")
      return
  else:
    effort = (baseV*2) + wellness
    await ctx.send("**Healed Effort: **" + str(effort))


keep_alive()
TOKEN = os.environ.get("DISCORD_BOT_SECRET")
client.run(TOKEN)
